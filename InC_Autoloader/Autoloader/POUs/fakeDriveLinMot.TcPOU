<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="fakeDriveLinMot" Id="{7992763b-3ed1-4a5e-8646-f7cf7a676bf2}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK fakeDriveLinMot
VAR_INPUT
	IsAbsolute						: BOOL := FALSE;												// Use to mark that the axis is with an absolute encoder and no homing should be executed.
	InvertMotorPolarity				: BOOL := FALSE;												// Use this to invert the motor encoder polarity from here. (CurrentPosition or TargetPosition * -1 FTW)
	Band							: REAL := 10000;												// Encoder multiplier.
	DoStop							: BOOL;															// NOT WORKING!!!
END_VAR
VAR_OUTPUT
	CurrentPosition					: LREAL;														// The current motor position.
	CurrentCommand					: UDINT;														// The current motor command.
	CurrentVelocity			 		: LREAL;														// The current motor velocity.
	Enabled							: BOOL;															// Is the motor enabled for operation.
	Error							: BOOL;															// Is the motor in an error state.
	ErrorID							: UDINT;														// If the motor is in an error state this will hold the error data.
	Moving							: BOOL;															// Is the motor moving.	
	Refferenced 					: BOOL;															// Is the motor referenced - homed.
	TraveledPath					: LREAL;														// The motor last traveled path. Currently valid only when in positioning mode.
	Busy							: BOOL;															// Is the motor busy - executing command.
	Stopped							: BOOL;															// Is the motor stopped - not working.
END_VAR
VAR_IN_OUT
	// As a test
	TargetPosition					: REAL;															// The target position of the motor. If DoMove is set in the right conditions, this will be sent to the motor.
	TargetVelocity					: REAL;															// The motor target movement velocity.
	TargetAcceleration				: REAL;															// The motor target acceleration.
	TargetDeceleration				: REAL;															// The motor target deceleration.
	TargetPrecision					: REAL;															// The motor target precision. Could use this dynamically troughout different states when the precision needs change.
	OperationMode					: UDINT := 0;													// The motor target operation mode 0 - Positioning, 1 - Velocity.
	DoServoOn						: BOOL;															// Activate the motor power up.
	DoReset							: BOOL;															// Activate the motor reset.
	DoHome							: BOOL;															// Activate the motor homing function. If the motor is marked as an absolute one this will only be reset and no homing will take place.
	DoMove							: BOOL;															// Activate a movement command. The values set in the TargetPosition, TargetVelocity and TargetAcceleration will be sent to the motor.
	TargetReached					: BOOL;															// Is the motor target reached in both modes (The target position or velocity is reached).
	axis							: T_LM_Axis;													// Lin Mot Axis reference - the actual IO structure. - LINMOT Legacy type T_LM_Axis.
END_VAR
VAR		
	state							: E_MotorStates;												// Current motor function block state.
	fbTimer							: TON;															// Used for timeouts and etc..
	fbResetTimer					: TON;															// Used for reset timeout.
	fbMoveAbsolute					: FB_LM_MoveAbs;												// Move absolute function block										- LINMOT Legacy type FB_LM_MoveAbs.
	fbMoveVelocity					: FB_LM_MoveVelocity;											// Move to velocity function block.
	fbAxisControl					: FB_LM_AxisControl;											// Axis control function block 										- LINMOT Legacy type FB_LM_AxisControl.
	fbAxisStop						: FB_LM_Stop;													// Axis stop function block.
	fbTriggerF						: F_TRIG;														// Disable trigger.
	
	PositioningMovement				: BOOL;
	VelocityMovement				: BOOL;
	
	bResetDone						: BOOL 							:= FALSE;						// Use to reset the done flag within the fbMoveAbsolute block.
	TargetTravelPath				: LREAL;														// Used to hold the target travel path.
	VelocityReached					: BOOL;
	VelocityMonitorDelimiter		: LREAL := 1000;
	TargetedVelocity				: LREAL;
	MovingToPositiong				: BOOL;
	MovingWithVelocity				: BOOL;
	MotionActive					: BOOL;
	EngageAxisStop					: BOOL;
	AxisStopping					: BOOL;
	AxisStopped						: BOOL;
	
	StopState						: DINT := 0;
	
	NegativeDirection				: BOOL := FALSE;
	endMoveTimer                    : TON;
	endMoveTimerIN					: BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[endMoveTimer(IN := endMoveTimerIN, PT := T#3S);

IF doMove AND NOT endMoveTimerIN THEN
	TargetReached  := FALSE;
	endMoveTimerIN := TRUE;
END_IF

IF DoServoOn THEN
	Enabled := TRUE;
ELSE
	Enabled := FALSE;
END_IF

IF endMoveTimer.Q THEN
	TargetReached := TRUE;
END_IF

Refferenced := TRUE;
]]></ST>
    </Implementation>
    <LineIds Name="fakeDriveLinMot">
      <LineId Id="153" Count="0" />
      <LineId Id="166" Count="3" />
      <LineId Id="165" Count="0" />
      <LineId Id="154" Count="8" />
      <LineId Id="9" Count="0" />
      <LineId Id="173" Count="1" />
      <LineId Id="172" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>