<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="ROBOT" Id="{604af032-2a87-4ce8-af05-065565ae1cd2}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Robot
VAR
	fbRobot						: FB_Robot_Mitsubishi;
	nCurrentState				: DINT;
	nLastState					: DINT;				
	rtRobot_ProgramStarted		: TON;
	rtRobot_ProgramCompleted	: TON;
	fbTimerRobot				: TON;
	gbTimerTimeoutRobot			: TON;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[Stations.gstRobotMitsubishi.sRobotAddress := '192.168.0.20';
Stations.gstRobotMitsubishi.nRobotPort := 10004;
Stations.gstRobotMitsubishi.bAutomaticMode := TRUE;
fbRobot(Robot := Stations.gstRobotMitsubishi,
	PacketManager := Stations.gstRobotMitsubishiPacketManager);
		
rtRobot_ProgramStarted(IN:=NOT Stations.gstRobotMitsubishi.bReady 
						AND NOT Stations.gstRobotMitsubishi.bProgramCompleted, PT:=T#30MS);
rtRobot_ProgramCompleted(IN:= Stations.gstRobotMitsubishi.bReady AND Stations.gstRobotMitsubishi.bProgramCompleted 
							AND Stations.gstRobotMitsubishi.nDependencyState = 0, PT:=T#30MS);

// If robot error
IF Stations.gstRobotMitsubishi.bError 
AND nCurrentState > E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR_DONE 
AND nCurrentState < E_RobotStates.STATE_ERROR THEN
	nLastState:=nCurrentState;
	nCurrentState:=E_RobotStates.STATE_ERROR;
END_IF
//Statuses
TagsRobot.robotError := Stations.gstRobotMitsubishi.bError;
TagsRobot.robotComOnline := Stations.gstRobotMitsubishi.bOnline;

// Robot Settings
Stations.gstRobotMitsubishi.nTargetProductID := TagsRobot.roboRecipeNum;
Stations.gstRobotMitsubishi.nTargetGripperID := 1;		//TBD Setting for GipperID
Stations.gstRobotMitsubishi.nTargetTrayOrientation := TagsRobot.rotPallet;
		
CASE nCurrentState OF
	E_RobotStates.STATE_WAITING_FOR_INIT:
		IF Stations.roboData = dataRequestRobot.roboInit THEN			
			nLastState := nCurrentState;
			nCurrentState := E_RobotStates.STATE_INIT_ROBOT_TOGGLE;
		END_IF
		
	E_RobotStates.STATE_INIT_ROBOT_TOGGLE:
		IF Stations.gstRobotMitsubishi.bAutomaticMode THEN
			Stations.gstRobotMitsubishi.bDoReset:=FALSE;
			Stations.gstRobotMitsubishi.bToggleConnect:=FALSE;
			Stations.gstRobotMitsubishi.bDoStart:=FALSE;
			fbTimerRobot(IN:=TRUE,PT:=T#1000MS);
			IF fbTimerRobot.Q THEN
				fbTimerRobot(IN:=FALSE);				
				nLastState := nCurrentState;
				nCurrentState :=E_RobotStates.STATE_INIT_ROBOT_ON;
			END_IF
		ELSE
			// Robot Auto  = true
		END_IF

	E_RobotStates.STATE_INIT_ROBOT_ON:
		IF Stations.gstRobotMitsubishi.bOnline THEN
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR;
		ELSE
			Stations.gstRobotMitsubishi.bToggleConnect:=TRUE;
			a_ToggleRobot();
		END_IF	

	E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR:
		IF Stations.gstRobotMitsubishi.bError OR Stations.gstRobotMitsubishi.nCurrentState = E_Robot_Mitsubishi_States.STATE_WAITING_RESET THEN
			Stations.gstRobotMitsubishi.bDoReset:=TRUE;
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR_DONE;
		ELSE
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_READY;
		END_IF	
	
	E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR_DONE:
		IF Stations.gstRobotMitsubishi.nCurrentState = E_Robot_Mitsubishi_States.STATE_OPERATIONAL THEN
			IF NOT Stations.gstRobotMitsubishi.bError THEN
				nLastState := nCurrentState;
				nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_READY;
			ELSE
				a_ToggleRobot();
			END_IF
		ELSIF Stations.gstRobotMitsubishi.nCurrentState = E_Robot_Mitsubishi_States.STATE_WAITING_RESET THEN
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_ERROR;
		END_IF
		
	E_RobotStates.STATE_INIT_CHECK_ROBOT_READY:
		IF NOT Stations.gstRobotMitsubishi.bReady OR NOT Stations.gstRobotMitsubishi.bExecuting THEN
			Stations.gstRobotMitsubishi.bDoStart:=TRUE;
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_READY_DONE;		
		ELSE
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_SERVOON;	
		END_IF
	
	E_RobotStates.STATE_INIT_CHECK_ROBOT_READY_DONE:
		IF Stations.gstRobotMitsubishi.bReady AND Stations.gstRobotMitsubishi.bExecuting THEN
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_SERVOON;
		ELSE
			a_ToggleRobot();					
		END_IF
				
	E_RobotStates.STATE_INIT_CHECK_ROBOT_SERVOON:		
		IF Stations.gstRobotMitsubishi.bPoweredOn AND Stations.gstRobotMitsubishi.bReady THEN
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_DONE;
		ELSE 				
			Stations.gstRobotMitsubishi.bDoServoOn:=TRUE;
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_CHECK_ROBOT_SERVOON_DONE;
		END_IF
		
	E_RobotStates.STATE_INIT_CHECK_ROBOT_SERVOON_DONE:
		IF Stations.gstRobotMitsubishi.bPoweredOn AND Stations.gstRobotMitsubishi.bReady THEN
			nLastState := nCurrentState;
			nCurrentState :=E_RobotStates.STATE_INIT_DONE;
		END_IF	
		
	E_RobotStates.STATE_INIT_DONE:
		Stations.roboData := dataRequestRobot.done;
		nLastState := nCurrentState;
		nCurrentState := E_RobotStates.STATE_WAITING_FOR_COMMAND;	
	
	E_RobotStates.STATE_WAITING_FOR_COMMAND:		
		IF Stations.roboData <> dataRequestRobot.done
		AND Stations.roboData <> dataRequestRobot.error 
		AND Stations.roboData <> dataRequestRobot.roboInit THEN
			Stations.gstRobotMitsubishi.nTargetProgram := Stations.roboData;
			IF Stations.roboData = dataRequestRobot.roboPrg_SensorLoad THEN
				Stations.gstRobotMitsubishi.nTargetTrayPosition := TagsRobot.loadPalletPos;
			ELSIF Stations.roboData = dataRequestRobot.roboPrg_SensorUnload THEN
				Stations.gstRobotMitsubishi.nTargetTrayPosition := TagsRobot.unLoadPalletPos;
			END_IF
			Stations.gstRobotMitsubishi.bDoStartProgram := TRUE;
			nLastState := nCurrentState;
			nCurrentState := E_RobotStates.STATE_WAITING_START_PRG;
		END_IF
		
	E_RobotStates.STATE_WAITING_START_PRG:
		IF rtRobot_ProgramStarted.Q THEN
			nLastState := nCurrentState;
			nCurrentState := E_RobotStates.STATE_PROGRAM_DONE;
		END_IF
		
	E_RobotStates.STATE_PROGRAM_DONE:
		IF rtRobot_ProgramCompleted.Q THEN
			Stations.roboData := dataRequestRobot.done;
			nLastState := nCurrentState;
			nCurrentState := E_RobotStates.STATE_WAITING_FOR_COMMAND;
		END_IF
		
	E_RobotStates.STATE_ERROR:
		Stations.roboData := dataRequestRobot.error;
		nLastState := nCurrentState;
		nCurrentState := E_RobotStates.STATE_WAITING_FOR_INIT;
		
END_CASE

]]></ST>
    </Implementation>
    <Action Name="a_ToggleRobot" Id="{93bc061d-ce6d-45c2-b967-a43187994360}">
      <Implementation>
        <ST><![CDATA[fbTimerRobot(IN:=TRUE,PT:=T#2000MS);
IF fbTimerRobot.Q THEN
	fbTimerRobot(IN:=FALSE);
	nLastState := nCurrentState;
	nCurrentState :=E_RobotStates.STATE_INIT_ROBOT_TOGGLE;
END_IF]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="ROBOT">
      <LineId Id="6" Count="0" />
      <LineId Id="224" Count="1" />
      <LineId Id="8" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="25" Count="3" />
      <LineId Id="165" Count="2" />
      <LineId Id="213" Count="0" />
      <LineId Id="168" Count="0" />
      <LineId Id="170" Count="1" />
      <LineId Id="20" Count="0" />
      <LineId Id="245" Count="0" />
      <LineId Id="244" Count="0" />
      <LineId Id="246" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="192" Count="0" />
      <LineId Id="212" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="10" Count="2" />
      <LineId Id="18" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="31" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="63" Count="51" />
      <LineId Id="119" Count="3" />
      <LineId Id="136" Count="22" />
      <LineId Id="62" Count="0" />
      <LineId Id="38" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="36" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="251" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="208" Count="0" />
      <LineId Id="207" Count="0" />
      <LineId Id="210" Count="1" />
      <LineId Id="209" Count="0" />
      <LineId Id="50" Count="0" />
      <LineId Id="232" Count="1" />
      <LineId Id="47" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="226" Count="0" />
      <LineId Id="228" Count="2" />
      <LineId Id="227" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="57" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="161" Count="2" />
      <LineId Id="172" Count="1" />
      <LineId Id="164" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
    </LineIds>
    <LineIds Name="ROBOT.a_ToggleRobot">
      <LineId Id="2" Count="4" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>