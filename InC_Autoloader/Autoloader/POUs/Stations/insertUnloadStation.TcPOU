<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="insertUnloadStation" Id="{84dd6e34-fdf5-4f37-a786-20108e65bcb8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK insertUnloadStation EXTENDS stateMachine
VAR_INPUT
	
	ioImage                : inserterUnloadImage;

END_VAR

VAR

	activeState            : inserterUnloadStates;	
	axisLinMot             : fakeDriveLinMot; //FB_ServoAxis_LinMot; 
	
	resetDone			   : BOOL := FALSE; 						   // Инсъртъра е ресетнат
	prepareStart           : BOOL := FALSE; 						   // Ако има сенсор в гнездото, завърта грипера 
	moveDownStart          : BOOL := FALSE; 						   // Слиза да вземе сензора
	unloadSensorStart      : BOOL := FALSE; 						   // Взима сензора и инсъртъра се вдига нагоре
	posStart               : BOOL := FALSE; 						   // Ротира грипера за взимане на сензора от робота
	releaseStart           : BOOL := FALSE; 						   // Подава сензора на робота
	syncRobot              : BOOL := false;                            // Робота е на безопастно място
	syncStart			   : BOOL := FALSE; 						   // Sync с индекс масата, че работа е завършена
	
	
	initRotPos			   : REAL; 									   // Начално завъртане
	workRotPos             : REAL;                                     // Завъртане за може робота да вземе сензора
	
	gripTime			   : TIME := T#250MS;                          // Време за ход на грипера                                     
	gripTimeOut            : TIME := T#2S;                             // Време за отваряне/затваряне на гриперите
	insertTimeOut          : TIME := T#3S;                             // Време за движене нагоре/надолу на inserter
    driveMoveTimeOut	   : TIME := T#4S;                             // Време за ход на мотора
	driveHomeTimeOut       : TIME := T#10S;                            // Време за home на мотора
	sensorTime             : TIME := T#250MS; 						   // Време за за реакция на лазерен сензор
	driveEnTime            : TIME := T#1S;                             // Време за ресет на инвертора на мотора
	drivePosTime           : TIME := T#100MS;                          // Време за задаване на задание за позициониране	

END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
drivesControl();          // Упр. на ЛинМот мотора 

setStateVars(ioImage, activeState);

CASE activeState OF
	

//  *** Start Up
//  Старт на станцията след подаване на захр.	

	inserterUnloadStates.stStartUp:
		setDisplayState(inserterUnLoadDisplayStates.dStStartUp);
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;	
		Stations.insertUnLoadDrive.DoHome     := FALSE;					   						   
		nextState(inserterUnloadStates.stPowerUp);

//  *** Power Up - Start
//  Инициализация след подaване на захранване

	inserterUnloadStates.stPowerUp:
		IF io.getSR(ioImage.xGrip_close, ioImage.xGrip_open) THEN
			setError(inserterUnloadStates.stErrInitSensor);
		END_IF
		nextState(inserterUnloadStates.stInit);

//  *** Init 
//  Инициализация на станцията
	
	inserterUnloadStates.stInit:
	
		depWait(globalDeps.depULoadInitDone);	
		
		IF NOT resetDone THEN
			nextState(inserterUnloadStates.stResetStart);
		END_IF
		
		IF prepareStart THEN
			nextState(inserterUnloadStates.stPrepareStart);
		END_IF
		
		IF moveDownStart THEN
			nextState(inserterUnloadStates.stMoveDownStart);
		END_IF		
		
		IF unloadSensorStart THEN
			nextState(inserterUnloadStates.stUnloadSensorStart);
		END_IF

		IF posStart THEN
			nextState(inserterUnloadStates.stPosStart);
		END_IF

		IF releaseStart THEN
			nextState(inserterUnloadStates.stReleaseStart);
		END_IF	
		
		IF syncRobot THEN
			nextState(inserterUnloadStates.stReleaseDone);
		END_IF

		IF syncStart THEN
			nextState(inserterUnloadStates.stSyncIndexStart);
		END_IF		
			
		nextState(inserterUnloadStates.stInitDone);
		
// *** Init Done

	inserterUnloadStates.stInitDone:
		nextState(inserterUnloadStates.stReady);
	
// *** Ready

	inserterUnloadStates.stReady:	
		setDisplayState(inserterUnLoadDisplayStates.dStStandBy);	
		IF Global.purgeDoneIU THEN
			resetDone          := FALSE;		
			Global.purgeDoneIU := FALSE;
		END_IF
		depNextState(Stations.machineStBase, GlobalDeps.depMachineStopping,  inserterUnloadStates.stInserterUnloadStopped);
		depNextState(Stations.machineStBase, GlobalDeps.depMachineStop,      inserterUnloadStates.stInserterUnloadStopped);	
		depWait(globalDeps.depULoadWaitIndex);
		nextState(inserterUnloadStates.stPrepareStart);

// *** Inserter is Stopped

	inserterUnloadStates.stInserterUnloadStopped:
		setDisplayState(inserterUnLoadDisplayStates.dStStationIsStopped);
		depWait(globalDeps.depULoadStop);
		depNextState(stations.machineStBase, GlobalDeps.depMachineAuto,       inserterUnloadStates.stReady);
	    depNextState(Stations.machineStBase, GlobalDeps.depMachinePurgeStart, inserterUnloadStates.stReady);			
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;	
		Stations.insertUnLoadDrive.DoHome     := FALSE;

// *** Reset - Start
// Ресетиране на inserter

	inserterUnloadStates.stResetStart:
		setDisplayState(inserterUnLoadDisplayStates.dStStationIsReseting);	
		resetDone := FALSE;		
		nextState(inserterUnloadStates.stResetSyncRobot);
		
// *** Reset - Robot Sync
// Робота трябва да е на безопастно растояние

	inserterUnloadStates.stResetSyncRobot:
		IF NOT Global.robotSafe THEN	
			depWait(globalDeps.depULoadWaitRobotReady);
			nextState(inserterUnloadStates.stResetGripOpen);	
	    ELSE
			nextState(inserterUnloadStates.stResetGripOpen);
		END_IF		

// *** Reset - Grip Open
// Отваряне на грипера

	inserterUnloadStates.stResetGripOpen:
		io.setSR(ioImage.yGrip_open, ioImage.yGrip_close);
		nextState(inserterUnloadStates.stResetGripCheck);	

// *** Reset - Grip Check
// Проверка дали грипера се е отворил.
// Движение на гора на инсертъра

	inserterUnloadStates.stResetGripCheck:		
 		IF io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) THEN
			io.setSR(ioImage.yInsert_up, ioImage.yInsert_down);
			nextState(inserterUnloadStates.stResetMoveUpCheck);	
		END_IF
		timeOutError(gripTimeOut, inserterUnloadStates.stErrGripNotOpen);
		
// *** Reset - Move Up Check
// Проверка дали инсертъра е горе

	inserterUnloadStates.stResetMoveUpCheck:		
		IF io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
			nextState(inserterUnloadStates.stResetLimitsCalc);			
		END_IF
		timeOutError(insertTimeOut, inserterUnloadStates.stErrInsertNotUp);	
			
// *** Reset - Limit Check
// В зависимост от избраният модел на продукт се зараждат настойки в инвертора на мотора

	inserterUnloadStates.stResetLimitsCalc:
			
		initRotPos     := Stations.insertUnloadSetting.rotParams[Global.recipe].initRot;
		workRotPos     := Stations.insertUnloadSetting.rotParams[Global.recipe].workRot;

		
		IF Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoReset  := TRUE;
		ELSE
			Stations.insertUnLoadDrive.DoReset  := FALSE;
			Stations.insertUnLoadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(inserterUnloadStates.stResetDriveHome);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, inserterUnloadStates.stErrDriveErr);
		
// *** Reset - Drive Home
// Рефериране на мотора

	inserterUnloadStates.stResetDriveHome:		
		IF Stations.insertUnLoadDrive.Enabled AND NOT Stations.insertUnLoadDrive.Error THEN	
			Stations.insertUnLoadDrive.DoHome := TRUE;
			IF stateDelay(drivePosTime) THEN
				nextState(inserterUnloadStates.stResetDriveCheck);	
			END_IF	
		ELSE
			setError(inserterUnloadStates.stErrDriveErr);
	   END_IF	
		
// *** Reset - Drive Check
// Проверка дали реферирането на мотора е завършено

	inserterUnloadStates.stResetDriveCheck:		
		IF Stations.insertUnLoadDrive.Refferenced AND NOT Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoHome := FALSE;
			nextState(inserterUnloadStates.stResetDone);	
		END_IF
		timeOutError(driveHomeTimeOut, inserterUnloadStates.stErrDriveHome);	

// *** Reset - Done

	inserterUnloadStates.stResetDone:		
		resetDone := TRUE;
	    nextState(inserterUnloadStates.stReady);		
		
// *** Prepare - Start
// Индекс масата е завършила ходата си 

	inserterUnloadStates.stPrepareStart:
       setDisplayState(inserterUnLoadDisplayStates.dStWorking);	 
	   prepareStart := TRUE;
	   io.setSR(ioImage.yGrip_open, ioImage.yGrip_close);
	   io.setSR(ioImage.yInsert_up, ioImage.yInsert_down);
	   nextState(inserterUnloadStates.stPrepareGripCheck);		
		
// *** Prepare - Grip Check
// Инсертера трябва да е горе и грипера му да е отворен

	inserterUnloadStates.stPrepareGripCheck:		
		IF io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) AND 
		   io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
				nextState(inserterUnloadStates.stPrepareNestCheck);
		ELSE
			IF stateDelay(insertTimeOut) THEN
				IF NOT io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) THEN
					setError(inserterUnloadStates.stErrGripNotOpen);
				ELSIF io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
					setError(inserterUnloadStates.stErrInsertNotUp);
				END_IF
			END_IF
		END_IF	
				
// *** Prepare - Nest Check
// За да започне цикъла на станицята, трябва да има в сензор в гнездото
// и InC да е върнало, че този сензор е със статус GOOD

	inserterUnloadStates.stPrepareNestCheck:	
		IF stateDelay(sensorTime) THEN
			IF io.getX(ioImage.xNest) AND Global.sensorStatus THEN
				Global.sensorOnIUnload := TRUE; 			
				IF Stations.insertUnloadDrive.Enabled AND NOT Stations.insertUnloadDrive.Error THEN
					nextState(inserterUnloadStates.stPrepareDriveMove);
				ELSE
					nextState(inserterUnloadStates.stPrepareDriveOn);
				END_IF
			ELSIF io.getX(ioImage.xNest) XOR GLobal.sensorStatus THEN
				setError(inserterUnloadStates.stErrNestSensor);
			ELSE	
				prepareStart := FALSE;
				nextState(inserterUnloadStates.stSyncIndexStart);
			END_IF
		END_IF	

// *** Prepare - Drive On
// Захранване на мотора ако не е пуснат 

	inserterUnloadStates.stPrepareDriveOn:
		IF Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoReset  := TRUE;
		ELSE
			Stations.insertUnLoadDrive.DoReset  := FALSE;
			Stations.insertUnLoadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(inserterUnloadStates.stPrepareDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, inserterUnloadStates.stErrDriveErr);

// *** Prepare - Drive Move
// Завърта мотора на поз. за изваждането на сензор

	inserterUnloadStates.stPrepareDriveMove:
		IF Stations.insertUnLoadDrive.Enabled AND NOT Stations.insertUnLoadDrive.Error THEN	
			Stations.insertUnLoadDrive.TargetVelocity      := Stations.insertUnLoadSetting.axisWorkSpeed;
			Stations.insertUnLoadDrive.TargetAcceleration  := Stations.insertUnLoadSetting.axisAcc;
			Stations.insertUnLoadDrive.TargetPrecision     := Stations.insertUnLoadSetting.axisPres;
			Stations.insertUnLoadDrive.TargetPosition      := initRotPos;
		    Stations.insertUnLoadDrive.DoMove              := TRUE;	
			IF stateDelay(drivePosTime) THEN		
				nextState(inserterUnloadStates.stPrepareDriveCheck);	
			END_IF	
		ELSE
			setError(inserterUnloadStates.stErrDriveErr);
	   END_IF	

// *** Prepare - Drive Check
// Проверка дали мотора си е завършил хода

	inserterUnloadStates.stPrepareDriveCheck:
		IF Stations.insertUnLoadDrive.TargetReached AND NOT Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoMove := FALSE;
			nextState(inserterUnloadStates.stPrepareDone);	
		ELSIF NOT Stations.insertUnLoadDrive.TargetReached AND Stations.insertUnLoadDrive.Error THEN
			setError(inserterUnloadStates.stErrDriveErr);
		END_IF	
		timeOutError(driveMoveTimeOut, inserterUnloadStates.stErrDriveTimeOut);

// *** Prepare - Done

	inserterUnloadStates.stPrepareDone:		
		prepareStart := FALSE;
	    nextState(inserterUnloadStates.stMoveDownStart);		
		
// *** Move Down  - Start
// Инсертера слиза надолу зада вземе сензор от гнездото на масата

	inserterUnloadStates.stMoveDownStart:	 
	   moveDownStart := TRUE;
	   io.setSR(ioImage.yGrip_open, ioImage.yGrip_close);
	   io.setSR(ioImage.yInsert_up, ioImage.yInsert_down);
	   nextState(inserterUnloadStates.stMoveDownGripCheck);	
		
// *** Move Down - Grip Check
// Инсертера трябва да е горе и грипера му да е отворен

	inserterUnloadStates.stMoveDownGripCheck:		
		IF io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) AND 
		   io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
		   		io.setSR(ioImage.yInsert_down, ioImage.yInsert_up);
				nextState(inserterUnloadStates.stMoveDownCheck);
		ELSE
			IF stateDelay(insertTimeOut) THEN
				IF NOT io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) THEN
					setError(inserterUnloadStates.stErrGripNotOpen);
				ELSIF io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
					setError(inserterUnloadStates.stErrInsertNotUp);
				END_IF
			END_IF
		END_IF			
		
// *** Move Down - Down Check
// Инсертера трябва да е долу

	inserterUnloadStates.stMoveDownCheck:		
		IF io.getSR(ioImage.xInsert_down, ioImage.xInsert_up) THEN
			nextState(inserterUnloadStates.stMoveDownDone);
		END_IF
		timeOutError(insertTimeOut, inserterUnloadStates.stErrInsertNotDown);	
		
// *** Move Down - Done

	inserterUnloadStates.stMoveDownDone:		
		moveDownStart := FALSE;
	    nextState(inserterUnloadStates.stUnloadSensorStart);		

// *** Unload Sensor - Start
// Грипера се затваря, захваща сензора и го изважда от гнездото на масата

	inserterUnloadStates.stUnloadSensorStart:	
		unloadSensorStart := TRUE;
		io.setSR(ioImage.yGrip_open, ioImage.yGrip_close);
		io.setSR(ioImage.yInsert_down, ioImage.yInsert_up);
	    nextState(inserterUnloadStates.stUnloadSensorGripCheck1);			

// *** Unload Sensor - Grip Check 1
// Проверка на гриперите

	inserterUnloadStates.stUnloadSensorGripCheck1:
		IF io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) AND 
		   io.getSR(ioImage.xInsert_down, ioImage.xInsert_up) THEN
		   		io.setSR(ioImage.yGrip_close, ioImage.yGrip_open);
				nextState(inserterUnloadStates.stUnloadSensorGripCheck2);
		ELSE
			IF stateDelay(insertTimeOut) THEN
				IF NOT io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) THEN
					setError(inserterUnloadStates.stErrGripNotOpen);
				ELSIF io.getSR(ioImage.xInsert_down, ioImage.xInsert_up) THEN
					setError(inserterUnloadStates.stErrInsertNotDown);
				END_IF
			END_IF
		END_IF	

// *** Unload Sensor - Grip Check 2
// Проверка  дали грипера се е затворил 

	inserterUnloadStates.stUnloadSensorGripCheck2:
		IF io.getSR(ioImage.xGrip_close, ioImage.xGrip_open) AND stateDelay(gripTime) THEN
			io.setSR(ioImage.yInsert_up, ioImage.yInsert_down);
			nextState(inserterUnloadStates.stUnloadSensorMoveCheck);
		END_IF	
		timeOutError(gripTimeOut, inserterUnloadStates.stErrGripNotClose);			
	
// *** Unload Sensor - Move Check
// Проверка  дали инсертера е горе

	inserterUnloadStates.stUnloadSensorMoveCheck:
		IF io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
			nextState(inserterUnloadStates.stUnloadSensorDone);
		END_IF	
		timeOutError(insertTimeOut, inserterUnloadStates.stErrInsertNotUp);

// *** Unload Sensor - Done

	inserterUnloadStates.stUnloadSensorDone:		
		unloadSensorStart := FALSE;
	    nextState(inserterUnloadStates.stPosStart);
		
// *** Pos - Start
// Сензора трябва да се ротира, че да може да го хване робота

	inserterUnloadStates.stPosStart:
		posStart := TRUE;
		io.setSR(ioImage.yGrip_close, ioImage.yGrip_open);
		io.setSR(ioImage.yInsert_up, ioImage.yInsert_down);
		nextState(inserterUnloadStates.stPosGripCheck);

// *** Pos - Grip Check

	inserterUnloadStates.stPosGripCheck:		
		IF io.getSR(ioImage.xGrip_close, ioImage.xGrip_open) AND 
		   io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
				IF Stations.insertUnloadDrive.Enabled AND NOT Stations.insertUnloadDrive.Error THEN
					nextState(inserterUnloadStates.stPosDriveMove);
				ELSE
					nextState(inserterUnloadStates.stPosDriveOn);
				END_IF
		ELSE
			IF stateDelay(insertTimeOut) THEN
				IF NOT io.getSR(ioImage.xGrip_close, ioImage.xGrip_open) THEN
					setError(inserterUnloadStates.stErrGripNotClose);
				ELSIF io.getSR(ioImage.xInsert_up, ioImage.xInsert_down) THEN
					setError(inserterUnloadStates.stErrInsertNotUp);
				END_IF
			END_IF
		END_IF			
		
// *** Pos - Drive On
// Захранване на мотора ако не е пуснат 

	inserterUnloadStates.stPosDriveOn:
		IF Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoReset  := TRUE;
		ELSE
			Stations.insertUnLoadDrive.DoReset  := FALSE;
			Stations.insertUnLoadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(inserterUnloadStates.stPosDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, inserterUnloadStates.stErrDriveErr);

// *** Pos - Drive Move
// Завърта мотора на поз. за взимане на сензора от робота

	inserterUnloadStates.stPosDriveMove:
		IF Stations.insertUnLoadDrive.Enabled AND NOT Stations.insertUnLoadDrive.Error THEN	
			Stations.insertUnLoadDrive.TargetVelocity      := Stations.insertUnLoadSetting.axisWorkSpeed;
			Stations.insertUnLoadDrive.TargetAcceleration  := Stations.insertUnLoadSetting.axisAcc;
			Stations.insertUnLoadDrive.TargetPrecision     := Stations.insertUnLoadSetting.axisPres;
			Stations.insertUnLoadDrive.TargetPosition      := workRotPos;
		    Stations.insertUnLoadDrive.DoMove              := TRUE;	
			IF stateDelay(drivePosTime) THEN		
				nextState(inserterUnloadStates.stPosDriveCheck);
			END_IF	
		ELSE
			setError(inserterUnloadStates.stErrDriveErr);
	   END_IF	
		
// *** Pos - Drive Check
// Проверка дали мотора си е завършил хода

	inserterUnloadStates.stPosDriveCheck:
		IF Stations.insertUnLoadDrive.TargetReached AND NOT Stations.insertUnLoadDrive.Error THEN
			Stations.insertUnLoadDrive.DoMove := FALSE;
			nextState(inserterUnloadStates.stPosDone);	
		ELSIF NOT Stations.insertUnLoadDrive.TargetReached AND Stations.insertUnLoadDrive.Error THEN
			setError(inserterUnloadStates.stErrDriveErr);
		END_IF	
		timeOutError(driveMoveTimeOut, inserterUnloadStates.stErrDriveTimeOut);		
		
// *** Pos - Done

	inserterUnloadStates.stPosDone:		
		posStart := FALSE;
		nextState(inserterUnloadStates.stReleaseStart);
		
// *** Release - Start
// Робота взима сензора от инсъртъра

	inserterUnloadStates.stReleaseStart:		
		releaseStart := TRUE;		
		nextState(inserterUnloadStates.stReleaseSyncRobot);		
		
// *** Release - Sync Robot
// Изчаква се робота 

	inserterUnloadStates.stReleaseSyncRobot:		
		depSync(Stations.roboStBase, globalDeps.depRoboULoadOnPos);
		depNextState(Stations.roboStBase, globalDeps.depRoboGripClose, inserterUnloadStates.stReleaseGripOpen);	
		
// *** Release - Grip Open
// Отваря грипера

	inserterUnloadStates.stReleaseGripOpen:	
		io.setSR(ioImage.yGrip_open, ioImage.yGrip_close);
		nextState(inserterUnloadStates.stReleaseGripCheck);		
		
// *** Release - Grip Check
// Проверка дали грипера е отворен

	inserterUnloadStates.stReleaseGripCheck:
		IF io.getSR(ioImage.xGrip_open, ioImage.xGrip_close) THEN
			nextState(inserterUnloadStates.stReleaseLoadDone);				
		END_IF
		timeOutError(gripTimeOut, inserterUnloadStates.stErrGripNotOpen);			
		
// *** Release - Load Done
// Грипера се е отворил и сензора е захванат успешно от робота

	inserterUnloadStates.stReleaseLoadDone:	
		setDisplayState(inserterUnLoadDisplayStates.dStStationReady);
		depWait(globalDeps.depRoboLoadSensor);	
		nextState(inserterUnloadStates.stReleaseDone);

// *** Release - Done

	inserterUnloadStates.stReleaseDone:	
		releaseStart := FALSE;
		syncRobot    := TRUE;
		depSync(Stations.roboStBase, globalDeps.depULoadRobotOutOfRich);
		nextState(inserterUnloadStates.stSyncIndexStart);	
		
// *** Sync Index - Start
// Дава се разрешение да се завърти индекс масата

	inserterUnloadStates.stSyncIndexStart:
		syncStart := TRUE;		
		syncRObot := FALSE;
		depWait(globalDeps.depULoadDone);	
		depNextState(Stations.incCommStBase, globalDeps.depIncCycleDone, inserterUnloadStates.stSyncIndexDone);

// *** Sync Index - Done

	inserterUnloadStates.stSyncIndexDone:
		syncStart := FALSE;
		nextState(inserterUnloadStates.stReady);		
	
	   
// *** Step Block State
// В този state се влиза винаги след изпълняването на една стъпка при стъпков режим
	inserterUnloadStates.stStepBlock:
		setDisplayState(inserterUnLoadDisplayStates.dStWaitForNextStep);
		
// *** Station Stop
// Станцията е била изключена 
 
	inserterUnloadStates.stStop: 	
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;	
		resetDone			  				  := FALSE; 						   
		prepareStart          				  := FALSE; 						   
		moveDownStart          				  := FALSE; 						   
		unloadSensorStart     				  := FALSE; 						  
		posStart                			  := FALSE; 						   
		releaseStart           				  := FALSE; 						   
		syncRobot              				  := FALSE;                            
		syncStart			    			  := FALSE; 						   	

// *** ERROR - Grip Not Open
// Грипера не се е отворил на време

	inserterUnloadStates.stErrGripNotOpen:
		setDisplayState(inserterUnloadDisplayStates.dStGripperDidNotOpen); 

// *** ERROR - Grip Not Close
// Грипера не се е затворил на време

	inserterUnloadStates.stErrGripNotClose:
		setDisplayState(inserterUnloadDisplayStates.dStGripperDidNotClose);
		
// *** ERROR - Inserter Not Down
// Inserter не е стинглал долна позиция на време

	inserterUnloadStates.stErrInsertNotDown:
		setDisplayState(inserterUnloadDisplayStates.dStInserterDidNotMoveDown);		
		
// *** ERROR - Inserter Not Up
// Inserter не е стинглал горна позиция на време

	inserterUnloadStates.stErrInsertNotUp:
		setDisplayState(inserterUnloadDisplayStates.dStInserterDidNotMoveUp);		
		
// *** ERROR - Drive Homming TimeOut
// ЛинМот мотора не е могъл да се homming както трябва

	inserterUnloadStates.stErrDriveHome:
		setDisplayState(inserterUnloadDisplayStates.dStDriveDidNotHome);
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;	
		Stations.insertUnLoadDrive.DoHome     := FALSE;	
		
// *** ERROR - Drive Homming TimeOut
// ЛинМот инвертора е върнал грешка

	inserterUnloadStates.stErrDriveErr:
		setDisplayState(inserterUnloadDisplayStates.dStDriveError);	
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;		
		
// *** ERROR - Drive Move TimeOut
// ЛинМот мотора не е завършил движението си навреме

	inserterUnloadStates.stErrDriveTimeOut:
		setDisplayState(inserterUnloadDisplayStates.dStDriveTimeOutMove);	
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;		
					
// *** ERROR - Init sensor 
// При старт на машаината не може да има захванат от грипера сензор

	inserterUnloadStates.stErrInitSensor:	
		setDisplayState(inserterUnloadDisplayStates.dStInitSensorGripError);

// *** ERROR - No Nest Sensor 
// InC е върнало сигнал че има сенсор в гнездото, но лазера не отчита нищо там

	inserterUnloadStates.stErrNestSensor:	
		setDisplayState(inserterUnloadDisplayStates.dStNoSensorInNest);	
		
// *** EMG 
// Аварийно спиране при натискане на гъба или отваряне на врата

	inserterUnloadStates.stEMG:		
		Stations.insertUnLoadDrive.DoEnable   := FALSE;
		Stations.insertUnLoadDrive.DoMove     := FALSE;	
		Stations.insertUnLoadDrive.DoHome     := FALSE;
		nextState(inserterUnloadStates.stInit);	

END_CASE]]></ST>
    </Implementation>
    <Action Name="drivesControl" Id="{c5084dd1-50f5-406a-92cd-ff6420e43564}">
      <Implementation>
        <ST><![CDATA[

axisLinMot       ( TargetPosition 		   := Stations.insertUnloadDrive.TargetPosition,
				   TargetVelocity 		   := Stations.insertUnloadDrive.TargetVelocity,
				   TargetAcceleration	   := Stations.insertUnloadDrive.TargetAcceleration,
				   TargetDeceleration	   := Stations.insertUnloadDrive.TargetAcceleration,
				   TargetPrecision 		   := Stations.insertUnloadDrive.TargetPrecision,			
				   IsAbsolute 			   := FALSE,
	               OperationMode		   := Stations.insertUnloadDrive.OperationMode,     				
	               Enabled 				   => Stations.insertUnloadDrive.Enabled,
	               Error 				   => Stations.insertUnloadDrive.Error,
	               ErrorID 				   => Stations.insertUnloadDrive.ErrorID,
	               Refferenced 			   => Stations.insertUnloadDrive.Refferenced,
	               Moving 				   => Stations.insertUnloadDrive.Moving,
	               CurrentPosition 		   => Stations.insertUnloadDrive.CurrentPosition,
	               CurrentVelocity		   => Stations.insertUnloadDrive.CurrentVelocity,             				
				   Axis					   := Stations.insertLoadAxis,
		           DoServoOn 			   := Stations.insertUnloadDrive.DoEnable, 
	               DoHome 				   := Stations.insertUnloadDrive.DoHome, 
	               DoMove 				   := Stations.insertUnloadDrive.DoMove, 
	               DoReset 				   := Stations.insertUnloadDrive.DoReset, 
	               TargetReached 		   := Stations.insertUnloadDrive.TargetReached, 
	               DoStop 				   := Stations.insertUnloadDrive.DoStop);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="insertUnloadStation">
      <LineId Id="1418" Count="56" />
      <LineId Id="2096" Count="3" />
      <LineId Id="1475" Count="15" />
      <LineId Id="2292" Count="2" />
      <LineId Id="2291" Count="0" />
      <LineId Id="1491" Count="27" />
      <LineId Id="2050" Count="0" />
      <LineId Id="1519" Count="1" />
      <LineId Id="2051" Count="0" />
      <LineId Id="2053" Count="0" />
      <LineId Id="2052" Count="0" />
      <LineId Id="1521" Count="53" />
      <LineId Id="2251" Count="0" />
      <LineId Id="1575" Count="0" />
      <LineId Id="2252" Count="0" />
      <LineId Id="1576" Count="53" />
      <LineId Id="2090" Count="0" />
      <LineId Id="1631" Count="37" />
      <LineId Id="2253" Count="0" />
      <LineId Id="1669" Count="0" />
      <LineId Id="2254" Count="0" />
      <LineId Id="1670" Count="29" />
      <LineId Id="1701" Count="139" />
      <LineId Id="2255" Count="0" />
      <LineId Id="1841" Count="0" />
      <LineId Id="2256" Count="0" />
      <LineId Id="1842" Count="33" />
      <LineId Id="2089" Count="0" />
      <LineId Id="1878" Count="28" />
      <LineId Id="2094" Count="0" />
      <LineId Id="2092" Count="0" />
      <LineId Id="1907" Count="6" />
      <LineId Id="2095" Count="0" />
      <LineId Id="1914" Count="0" />
      <LineId Id="2086" Count="0" />
      <LineId Id="1916" Count="18" />
      <LineId Id="2171" Count="6" />
      <LineId Id="2170" Count="0" />
      <LineId Id="1935" Count="49" />
      <LineId Id="2003" Count="4" />
      <LineId Id="2212" Count="4" />
      <LineId Id="2211" Count="0" />
      <LineId Id="2008" Count="9" />
      <LineId Id="50" Count="0" />
    </LineIds>
    <LineIds Name="insertUnloadStation.drivesControl">
      <LineId Id="2" Count="1" />
      <LineId Id="121" Count="19" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>