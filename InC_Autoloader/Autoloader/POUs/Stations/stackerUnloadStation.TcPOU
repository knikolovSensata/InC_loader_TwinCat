<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.3">
  <POU Name="stackerUnloadStation" Id="{eafe4983-b4a0-43f0-957d-0c5a1a116a6a}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK stackerUnloadStation EXTENDS stateMachine
VAR_INPUT
	
	ioImage                : stackerUnloadImage;

END_VAR

VAR

	activeState            : stackerUnloadStates;	
	axisFesto              : fakeDriveFesto; //FB_ServoAxis_FESTO_v2;
	

	resetDone			   : BOOL := FALSE; 						   //  След подава не захр. станцията се е ресетната
	prepareDone			   : BOOL := FALSE;							   //  Стакера е на позиция - станцията е готова за работа
	moveUpStart			   : BOOL := FALSE;							   //  Стакера се е преместил точно под тарата
	unlockPalletStart      : BOOL := FALSE; 						   //  Тарата е оключена и е на стакера - може да се премести надолу
	fixPalletStart		   : BOOL := FALSE; 						   //  Робота е доставил нова тара - може да се фиксира
	purgeStart			   : BOOL := FALSE; 						   //  Purge на станцията е завършил	
	
	moveDone		       : BOOL := FALSE; 						   // Фесто мотора си е изпълнил заданието при движение
	
	posCount			   : DINT;					 				   // Брой позиций на оста
	axisLen				   : REAL;				
	currentPos 			   : DINT;					 				   // Текуща позиция
	axisPosArr			   : ARRAY [0..Consts.MAX_AXIS_POS] OF REAL;   // Масив с позицийте на оста
	
	cylinderTimeOut		   : TIME := T#2S;                             // Време за ход на цилиндър
	driveEnTime		       : TIME := T#1S;							   // Време за enable на фесто drive
	initMoveTimeOut		   : TIME := T#20S;                            // Време за ход до крайно горно положение
	sensorTime 			   : TIME := T#250MS;                          // Време за реакция на оптичен сензор
	palletsLoadTimeOut	   : TIME := T#15S; 						   // Време за ход на зареждане на тари
	palletMoveTimeOut	   : TIME := T#10S;                            // Време за преместване на 1 позиция
	drivePosTime           : TIME := T#100MS;                          // Време за задаване на задание за позициониране



END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
drivesControl();          // Упр. на Феесто мотора дрижещ осна на стакера

setStateVars(ioImage, activeState);


CASE activeState OF 
	
//  *** Start Up
//  Старт на станцията след подаване на захр.	

	stackerUnloadStates.stStartUp:
		setDisplayState(stackerUnLoadDisplayStates.dStStartingUp);
		Stations.sUnloadDrive.DoEnable  := FALSE;
		Stations.sUnloadDrive.DoMove    := FALSE;						   						   
		nextState(stackerUnloadStates.stPowerUp);
		
//  *** Power Up - Start
//  Инициализация след подaване на захранване

	stackerUnloadStates.stPowerUp:
		IF io.getX(ioImage.xPalletOnTop) THEN
			setError(stackerUnloadStates.stErrRemovePallet);
		END_IF
		
//  *** Init 
//  Инициализация на станцията
	
	stackerUnloadStates.stInit:
	
		depWait(globalDeps.depSUnloadInit);		

		// Проверка за приключила инициализация - стакера е горе, празен
		IF NOT resetDone THEN
			nextState(stackerUnloadStates.stResetStart);
	    END_IF	
		
		// Стакера е  на позиция за работа - 1 ход под върха си
		IF NOT prepareDone THEN
			nextState(stackerUnloadStates.stPrepareStart);		
		END_IF
		
		// Стакера е в горна крайна позиция
		IF moveUpStart THEN
			nextState(stackerUnloadStates.stMoveUpStart);		
		END_IF
		
		// Има освободена тара на върха на стакера - може да се заради
		IF unlockPalletStart  THEN
			nextState(stackerUnloadStates.stUnlockPalletStart);
		END_IF
		
		// Стакера е заключил тара доставена от робота
		IF fixPalletStart  THEN
			nextState(stackerUnloadStates.stLockPalletLockFix);
		END_IF		
		
		// Проверява дали е приключила PURGE  процедура
		IF purgeStart THEN
			nextState(stackerUnloadStates.stUnloadPurgeStart);
		END_IF
		
		nextState(stackerUnloadStates.stInitDone);
		
// *** Init Done
// След излизането от аварийна ситуация или след изчисването на грешка
// станция е завършила своята инициализация

	stackerUnloadStates.stInitDone:

		nextState(stackerUnloadStates.stReady);	
		
// *** Ready

	stackerUnloadStates.stReady:
		setDisplayState(stackerUnLoadDisplayStates.dStStandBy);
		depNextState(Stations.machineStBase,  globalDeps.depMachineStopping,      stackerUnloadStates.stStackerStopped);
		depNextState(Stations.machineStBase,  globalDeps.depMachineStop,          stackerUnloadStates.stStackerStopped);		
		depNextState(Stations.roboStBase,     globalDeps.depRoboUnLodPalletFull,  stackerUnloadStates.stMoveUpStart);
	    depNextState(Stations.machineStBase,  globalDeps.depMacinePurgeStackers,  stackerUnloadStates.stUnloadPurgeStart);		
		depWait(globalDeps.depSUnloadRobotUnloadGrip);
		nextState(stackerUnloadStates.stLockPalletStart);
		
// *** Stacker is Stopped
// Стакера е спрял след като е завършил текущият си цикъл и е бил натиснат STOP бутона

	stackerUnloadStates.stStackerStopped:
        setDisplayState(stackerUnLoadDisplayStates.dStStationIsStopped);	
		Stations.sUnloadDrive.DoMove       := FALSE;
		Stations.sUnloadDrive.DoEnable     := FALSE;
		depWait(GlobalDeps.depSUnloadStop);	
		depNextState(stations.machineStBase, globalDeps.depMachineAuto,       stackerUnloadStates.stInitDone);
		depNextState(stations.machineStBase, globalDeps.depMachinePurgeStart, stackerUnloadStates.stReady);

// *** Reset - Start
// Започва инициялизация на стакера - трябва да се премести 
// нагоре докрай. Затова първо робота трябва да е на безопасно място.	

	stackerUnloadStates.stResetStart:
		resetDone   := FALSE;
		setDisplayState(stackerUnLoadDisplayStates.dStStackerIsReseting);
		IF NOT Global.robotSafe THEN
			depWait(globalDeps.depSUnloadWaitRobotReady);
			nextState(stackerUnloadStates.stResetOpenLocks);
		ELSE
			nextState(stackerUnloadStates.stResetOpenLocks);				
		END_IF
		
// *** Reset - Open Locks
// Отваряне на всички ключалки	

	stackerUnloadStates.stResetOpenLocks:
		io.setSR(ioImage.yLock1_unlock, ioImage.yLock1_lock);
		io.setSR(ioImage.yLock2_unlock, ioImage.yLock2_lock);
		io.setSR(ioImage.yPalletFix_unlock, ioImage.yPalletFix_lock);
		nextState(stackerUnloadStates.stResetCheckLocks);

// *** Reset - Check Locks
// Проверка дали всички ключалки са отворени	

	stackerUnloadStates.stResetCheckLocks:	   
		IF io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) AND 
		   io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) AND
		   io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
		   		nextState(stackerUnloadStates.stResetEnableDrive);
		END_IF
		
		IF stateDelay(cylinderTimeOut) THEN
			
			IF NOT io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) THEN
				setError(stackerUnloadStates.stErrLock1NotOpen);
			ELSIF NOT io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) THEN
				setError(stackerUnloadStates.stErrLock2NotOpen);
			ELSIF NOT io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
				setError(stackerUnloadStates.stErrFixerNotOpen);
		    END_IF
			
		END_IF 
		
// *** Reset - Enable Drive
// Вкл. на инвертора на FESTO мотора на оста на стакера	

	stackerUnloadStates.stResetEnableDrive:
		IF Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoReset  := TRUE;
		ELSE
			Stations.sUnloadDrive.DoReset  := FALSE;
			Stations.sUnloadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(stackerUnloadStates.stResetDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, stackerUnLoadStates.stErrAxis);

// *** Reset - Drive Move
// Оста на стакера прави ход до горно крайно положение

	stackerUnloadStates.stResetDriveMove:	
		IF Stations.sUnloadDrive.Enabled AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.TargetPosition     := 0.0;
			Stations.sUnloadDrive.TargetAcceleration := Stations.sUnloadSettings.axisAcc;
			Stations.sUnloadDrive.TargetVelocity     := Stations.sUnloadSettings.axisInitSpeed;
			Stations.sUnloadDrive.DoMove             := TRUE;
			moveDone							     := FALSE;
			IF stateDelay(drivePosTime) THEN
				nextState(stackerUnloadStates.stResetCheckDrive);
			END_IF
		ELSE
			setError(stackerUnloadStates.stErrAxis);
	   END_IF	

// *** Reset - Check Drive
// Проверка дали оста е завършила хода си - горно крайно положение

	stackerUnloadStates.stResetCheckDrive:	
		IF Stations.sUnloadDrive.TargetReached AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoMove := FALSE;
			moveDone 				     := TRUE;
			nextState(stackerUnloadStates.stResetDone);	
		ELSIF NOT Stations.sUnloadDrive.TargetReached AND Stations.sUnloadDrive.Error THEN
			setError(stackerUnloadStates.stInitMoveErr);
		END_IF	
		timeOutError(initMoveTimeOut, stackerUnloadStates.stInitMoveErr);			

// *** Reset - Done

	stackerUnloadStates.stResetDone:
		IF NOT purgeStart THEN		
			resetDone   			    := TRUE;
			prepareDone 			    := FALSE;
			tagsHMI.UnloadStackerSignal := TRUE;
		ELSE
			nextState(stackerUnloadStates.stUnloadPurgeConfirm);
		END_IF	

// *** Purge - Confirm
// Този state се изпълнява само при край на PURGE - за може правилно да завърши тази процедура

	stackerUnloadStates.stUnloadPurgeConfirm:
		 purgeStart                  := FALSE;	
		 resetDone                   := TRUE;		
		 prepareDone                 := FALSE;
		 tagsHMI.UnloadStackerSignal := TRUE;
		 depWait(globalDeps.depSUnloadPurgeDone);
				
// *** Prepare - Start
// Стакера трябва да стой на 1 ход под горна крайна точка

	stackerUnloadStates.stPrepareStart:
		prepareDone := FALSE;
		nextState(stackerUnloadStates.stPreparaCheckTop);
				
// *** Prepare - Check Top
// На върха на стакера не трябва да има тари 

	stackerUnloadStates.stPreparaCheckTop:		
		IF NOT io.getX(ioImage.xPalletOnTop) THEN
			nextState(stackerUnloadStates.stPrepareLimitCheck);
		ELSE
			setError(stackerUnloadStates.stErrPalletDetected);
		END_IF
		
// *** Prepare - Limit Check
//  Проверяват се дали има зададени параметри на хода на стакера
//  Ако няма такива НЕ може да се продължи с инизиализацията

	stackerUnloadStates.stPrepareLimitCheck:
		IF Stations.sUnloadSettings.axisLength < Consts.MIN_AXIS_LEN OR Stations.sUnloadSettings.palletSize[Global.recipe] < Consts.MIN_PALLET_SIZE THEN
				setError(stackerUnloadStates.stErrNoProperSettings);
		END_IF
		nextState(stackerUnloadStates.stPrepareCalcAxis);			

// *** Prepare - Calc Axis
// Изчисляват се позицийте за хода на оста на стакера 	

	stackerUnloadStates.stPrepareCalcAxis:
	    axisLen       := 0.0;
		axisPosArr[0] := 0.0;
		currentPos 	  := 1;
		posCount      := 1;
		
		WHILE axisLen < Stations.sUnloadSettings.axisLength AND currentPos < Consts.MAX_AXIS_POS DO
			axisLen    			   := axisLen + Stations.sUnloadSettings.palletSize[Global.recipe];
			axisPosArr[currentPos] := axisLen;
			currentPos  := currentPos + 1;
		END_WHILE
		
		posCount     := currentPos;
		currentPos   := 0;
		nextState(stackerUnloadStates.stPrepareOpenLocks);

// *** Prepare - Open Lock
// Отваряне на всички ключалки	

	stackerUnloadStates.stPrepareOpenLocks:		
		io.setSR(ioImage.yLock1_unlock, ioImage.yLock1_lock);
		io.setSR(ioImage.yLock2_unlock, ioImage.yLock2_lock);
		io.setSR(ioImage.yPalletFix_unlock, ioImage.yPalletFix_lock);
		nextState(stackerUnloadStates.stPrepareCheckLocks);	

// *** Prepare - Check Locks
// Проверка дали всички ключалки са отворени	

	stackerUnloadStates.stPrepareCheckLocks:	   
		IF io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) AND 
		   io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) AND
		   io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
		   		nextState(stackerUnloadStates.stPrepareDriveOn);
		END_IF
		
		IF stateDelay(cylinderTimeOut) THEN
			
			IF NOT io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) THEN
				setError(stackerUnloadStates.stErrLock1NotOpen);
			ELSIF NOT io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) THEN
				setError(stackerUnloadStates.stErrLock2NotOpen);
			ELSIF NOT io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
				setError(stackerUnloadStates.stErrFixerNotOpen);
		    END_IF
			
		END_IF	

// *** Prepare - Drive On
// Изчисляват се позицийте за хода на оста на стакера 	

	stackerUnloadStates.stPrepareDriveOn:
		IF Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoReset  := TRUE;
		ELSE
			Stations.sUnloadDrive.DoReset  := FALSE;
			Stations.sUnloadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(stackerUnloadStates.stPrepareDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, stackerUnloadStates.stErrAxis);
	
		
// *** Prepare - Drive Move
// Оста на стакера прави ход 1 поз. под крайната горна точка

	stackerUnloadStates.stPrepareDriveMove:	
		IF Stations.sUnloadDrive.Enabled AND NOT Stations.sUnloadDrive.Error THEN
			currentPos								 := 1;
			Stations.sUnloadDrive.TargetPosition     := axisPosArr[currentPos];
			Stations.sUnloadDrive.TargetAcceleration := Stations.sUnloadSettings.axisAcc;
			Stations.sUnloadDrive.TargetVelocity     := Stations.sUnloadSettings.axisInitSpeed;
			Stations.sUnloadDrive.DoMove             := TRUE;
			moveDone							     := FALSE;
			IF stateDelay(drivePosTime) THEN
				nextState(stackerUnloadStates.stPrepareCheckDrive);
			END_IF
		ELSE
			setError(stackerUnloadStates.stErrAxis);
	   END_IF			
	
// *** Prepare - Check Drive
// Проверка дали оста е завършила хода си - 1 поз. под горна крайна точка

	stackerUnloadStates.stPrepareCheckDrive:		
		IF Stations.sUnloadDrive.TargetReached AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoMove := FALSE;
			moveDone 				     := TRUE;
			nextState(stackerUnloadStates.stPrepareSync);	
		ELSIF NOT Stations.sUnloadDrive.TargetReached AND Stations.sUnloadDrive.Error THEN
			setError(stackerUnloadStates.stInitMoveErr);
		END_IF	
		timeOutError(palletMoveTimeOut, stackerUnloadStates.stErrPalletMove);	
		
// *** Prepare - Sync

	stackerUnloadStates.stPrepareSync:		
		depWait(globalDeps.depSUnloadStationReady);	
		nextState(stackerUnloadStates.stPrepareDone);			
		
// *** Prepare - Done

	stackerUnloadStates.stPrepareDone:		
		prepareDone         := TRUE;
		Global.uStackerFull := FALSE;
		nextState(stackerUnloadStates.stReady);		
	
// *** Move up - Start
// Прави се 1 ход нагоре  - стакера застава под тарата

	stackerUnloadStates.stMoveUpStart:	
		moveUpStart := TRUE;
		setDisplayState(stackerUnLoadDisplayStates.dStPalletReady);
		IF Stations.sUnloadDrive.Enabled AND NOT Stations.sUnloadDrive.Error THEN
			nextState(stackerUnloadStates.stMoveUpDriveMove);
		ELSE
			nextState(stackerUnloadStates.stMoveUpDriveOn);
	    END_IF
		
// *** Move up - Drive On
// Вкл. на инвертора на FESTO мотора на оста на стакера	

	stackerUnloadStates.stMoveUpDriveOn:	
		IF Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoReset  := TRUE;
		ELSE
			Stations.sUnloadDrive.DoReset  := FALSE;
			Stations.sUnloadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(stackerUnloadStates.stMoveUpDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, stackerUnloadStates.stErrAxis);
	
// *** Move up - Drive Move
// Прави 1 ход нагоре

	stackerUnloadStates.stMoveUpDriveMove:	
		IF moveDone THEN
			currentPos := currentPos - 1;
		END_IF
		IF currentPos <= 0 THEN
			currentPos := 0;
		END_IF
		Stations.sUnloadDrive.TargetPosition     := axisPosArr[currentPos];
		Stations.sUnloadDrive.TargetAcceleration := Stations.sUnloadSettings.axisAcc;
		Stations.sUnloadDrive.TargetVelocity     := Stations.sUnloadSettings.axisInitSpeed;
		Stations.sUnloadDrive.DoMove             := TRUE;
		moveDone							     := FALSE;
		IF stateDelay(drivePosTime) THEN		
			nextState(stackerUnloadStates.stMoveUpCkeckDrive);
		END_IF	
	
// *** Move up - Check Drive
// Проверка дали е завършил хода на оста

	stackerUnloadStates.stMoveUpCkeckDrive:		
		IF Stations.sUnloadDrive.TargetReached AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoMove := FALSE;
			moveDone 				     := TRUE;
			nextState(stackerUnloadStates.stMoveUpDone);	
		ELSIF NOT Stations.sUnloadDrive.TargetReached AND Stations.sUnloadDrive.Error THEN
			setError(stackerUnloadStates.stInitMoveErr);
		END_IF	
		timeOutError(palletMoveTimeOut, stackerUnloadStates.stErrPalletMove);	
	
// *** Move up - Done

	stackerUnloadStates.stMoveUpDone:	
		moveUpStart := FALSE;	
		nextState(stackerUnloadStates.stUnlockPalletStart);
		
// *** Unlock Pallet - Start
// Освобождава пале на върха на стакера

	stackerUnloadStates.stUnlockPalletStart:	
		unlockPalletStart := TRUE;		
		nextState(stackerUnloadStates.stUnlockPalletRelease);			
		
// *** Unlock Pallet - Start
// Освобождаване на палето

	stackerUnloadStates.stUnlockPalletRelease:			
		io.setSR(ioImage.yLock1_unlock, ioImage.yLock1_lock);
		io.setSR(ioImage.yLock2_unlock, ioImage.yLock2_lock);
		io.setSR(ioImage.yPalletFix_unlock, ioImage.yPalletFix_lock);
		nextState(stackerUnloadStates.stUnlockPalletCheck);		
	
// *** Unlock Pallet - Check
// Проверка дали са се отворили всички ключалки

	stackerUnloadStates.stUnlockPalletCheck:		
		IF io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) AND 
		   io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) AND
		   io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
				IF Stations.sUnloadDrive.Enabled AND NOT Stations.sUnloadDrive.Error THEN
					nextState(stackerUnloadStates.stUnlockPalletDriveMove);
				ELSE
					nextState(stackerUnloadStates.stUnlockPalletDriveOn);
	    		END_IF
		END_IF
		
		IF stateDelay(cylinderTimeOut) THEN
			
			IF NOT io.getSR(ioImage.xLock1_unlock, ioImage.xLock1_lock) THEN
				setError(stackerUnloadStates.stErrLock1NotOpen);
			ELSIF NOT io.getSR(ioImage.xLock2_unlock, ioImage.xLock2_lock) THEN
				setError(stackerUnloadStates.stErrLock2NotOpen);
			ELSIF NOT io.getSR(ioImage.xPalletFix_unlock, ioImage.xPalletFix_lock) THEN
				setError(stackerUnloadStates.stErrFixerNotOpen);
		    END_IF
			
		END_IF		
	
// *** Unlock Pallet - Drive On
// Вкл. на инвертора на FESTO мотора на оста на стакера	

	stackerUnloadStates.stUnlockPalletDriveOn:	
		IF Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoReset  := TRUE;
		ELSE
			Stations.sUnloadDrive.DoReset  := FALSE;
			Stations.sUnloadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(stackerUnloadStates.stUnlockPalletDriveMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, stackerUnloadStates.stErrAxis);	
		
// *** Unlock Pallet - Drive Move
// Прави 2 хода надолу

	stackerUnloadStates.stUnlockPalletDriveMove:	
		IF currentPos = posCount - 1 THEN                         // Стакера е пълен
			unlockPalletStart   := FALSE;
			nextState(stackerUnloadStates.stResetOpenLocks);
		ELSIF currentPos = posCount - 2 THEN
			Global.startZumer   := TRUE;
			Global.uStackerFull := TRUE;	
		ELSE
			IF moveDone THEN
				currentPos := currentPos + 2;
			END_IF
			IF currentPos >= posCount THEN
				currentPos := posCount;
			END_IF
			Stations.sUnloadDrive.TargetPosition     := axisPosArr[currentPos];
			Stations.sUnloadDrive.TargetAcceleration := Stations.sUnloadSettings.axisAcc;
			Stations.sUnloadDrive.TargetVelocity     := Stations.sUnloadSettings.axisInitSpeed;
			Stations.sUnloadDrive.DoMove             := TRUE;
			moveDone							     := FALSE;
			IF stateDelay(drivePosTime) THEN
				nextState(stackerUnloadStates.stUnlockPalletCkeckDrive);	
			END_IF	
	   END_IF	
		
// *** Unlock Pallet - Check Drive
// Проверка дали е завършил хода на оста

	stackerUnloadStates.stUnlockPalletCkeckDrive:		
		IF Stations.sUnloadDrive.TargetReached AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoMove := FALSE;
			moveDone 				     := TRUE;
			nextState(stackerUnloadStates.stUnlockPalletSync);	
		ELSIF NOT Stations.sUnloadDrive.TargetReached AND Stations.sUnloadDrive.Error THEN
			setError(stackerUnloadStates.stInitMoveErr);
		END_IF	
		timeOutError(palletMoveTimeOut, stackerUnloadStates.stErrPalletMove);

// *** Unlock Pallet - Sync

	stackerUnloadStates.stUnlockPalletSync:	
		depWait(globalDeps.depSUnloadStationReady);	 
		nextState(stackerUnloadStates.stUnlockPalletDone);
		
// *** Unlock Pallet - Done

	stackerUnloadStates.stUnlockPalletDone:	
		unlockPalletStart := FALSE;
		nextState(stackerUnloadStates.stReady);	
	
// *** Lock Pallet - Start
// Робота е преместил нова тара на върха на стакера - тя трябва да се заключи

	stackerUnloadStates.stLockPalletStart:	
		setDisplayState(stackerUnLoadDisplayStates.dStStartingUp);		
		nextState(stackerUnloadStates.stLockPalletLocking);

// *** Lock Pallet - Locking
// Затваряне на ключалките, само ако има тара

	stackerUnloadStates.stLockPalletLocking: 
	IF io.getX(ioImage.xPalletOnTop) THEN
		io.setSR(ioImage.yLock1_lock, ioImage.yLock1_unlock);
		io.setSR(ioImage.yLock2_lock, ioImage.yLock2_unlock);		
		nextState(stackerUnloadStates.stLockPalletCheckLocks);		
	END_IF
	IF stateDelay(sensorTime) THEN 
		Global.palletFail := TRUE;
		setError(stackerUnloadStates.stErrNoPallet);
	END_IF
		
// *** Lock Pallet - Check Locks
// Проверка дали ключалките са заключени

	stackerUnloadStates.stLockPalletCheckLocks:			
		IF io.getSR(ioImage.xLock1_lock, ioImage.xLock1_unlock) AND 
		   io.getSR(ioImage.xLock2_lock, ioImage.xLock2_unlock) THEN
		   		nextState(stackerUnloadStates.stLockPalletSyncRobot);
		END_IF
		
		IF stateDelay(cylinderTimeOut) THEN
			
			IF NOT io.getSR(ioImage.xLock1_lock, ioImage.xLock1_unlock) THEN
				setError(stackerUnloadStates.stErrLock1NotClose);
			ELSIF NOT io.getSR(ioImage.xLock2_lock, ioImage.xLock2_unlock) THEN
				setError(stackerUnloadStates.stErrLock2NotClose);
			END_IF
			
		END_IF		
		
// *** Lock Pallet - Synck Robot
// Тарата е заключена - робота може да освободи

	stackerUnloadStates.stLockPalletSyncRobot:			
		depSync(Stations.roboStBase, globalDeps.depRoboUnLoadPalletLock);		
		depWait(globalDeps.depSUnloadRobotOutOfReach);
		nextState(stackerUnloadStates.stLockPalletLockFix);	

// *** Lock Pallet - Lock Fix
// Робота е освободил тарата - тя може да се фиксира

	stackerUnloadStates.stLockPalletLockFix:
		fixPalletStart := TRUE;	
		io.setSR(ioImage.yPalletFix_lock, ioImage.yPalletFix_unlock);
		nextState(stackerUnloadStates.stLockPalletCheckFix);
		
// *** Lock Pallet - Check Fix
// Проверка дали тарата е фиксирана

	stackerUnloadStates.stLockPalletCheckFix:		
		IF io.getSR(ioImage.xPalletFix_lock, ioImage.xPalletFix_unlock) THEN
		   		nextState(stackerUnloadStates.stLockPalletDone);
		END_IF
		
		IF stateDelay(cylinderTimeOut) THEN
			setError(stackerUnloadStates.stErrFixerNotClose);	
		END_IF		

// *** Lock Pallet - Done

	stackerUnloadStates.stLockPalletDone:
		fixPalletStart := FALSE;
		nextState(stackerUnloadStates.stReady);		

// *** Purge - Start
// Без значение колко палети има те трябва да се извадят от стакера

	stackerUnloadStates.stUnloadPurgeStart:	
		purgeStart := TRUE;
		setDisplayState(stackerUnLoadDisplayStates.dStStackerIsReseting);
		nextState(stackerUnloadStates.stUnloadPurgeCheck);

// *** Purge - Check
// Ако стакера е на долна крайна поз. - се прави Reset

	stackerUnloadStates.stUnloadPurgeCheck:
		IF moveDone AND currentPos = posCount THEN
			nextState(stackerUnloadStates.stUnloadPurgeDone);
		ELSE
			IF Stations.sUnLoadDrive.Enabled AND NOT Stations.sUnLoadDrive.Error THEN
				nextState(stackerUnloadStates.stUnloadPurgeMove);
			 ELSE
				nextState(stackerUnloadStates.stUnloadPurgeDriveOn);
			END_IF	
		END_IF

// *** Purge - Drive On
// Вкл. на инвертора на FESTO мотора на оста на стакера	

	stackerUnloadStates.stUnloadPurgeDriveOn:	
		IF Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoReset  := TRUE;
		ELSE
			Stations.sUnloadDrive.DoReset  := FALSE;
			Stations.sUnloadDrive.DoEnable := TRUE;
			IF stateDelay(driveEnTime) THEN
				nextState(stackerUnloadStates.stUnloadPurgeMove);
			END_IF
		END_IF
		timeOutError(driveEnTime*2, stackerUnloadStates.stErrAxis);		
		
// *** Purge - Drive Move
// Прави 1 хода нагоре

	stackerUnloadStates.stUnloadPurgeMove:	
		IF moveDone THEN
			currentPos := currentPos - 1;
		END_IF
		Stations.sUnloadDrive.TargetPosition     := axisPosArr[currentPos];
		Stations.sUnloadDrive.TargetAcceleration := Stations.sUnloadSettings.axisAcc;
		Stations.sUnloadDrive.TargetVelocity     := Stations.sUnloadSettings.axisInitSpeed;
		Stations.sUnloadDrive.DoMove             := TRUE;
		moveDone							     := FALSE;
		IF stateDelay(drivePosTime) THEN		
			nextState(stackerUnloadStates.stUnloadPurgeMoveCheck);
		END_IF	

// *** Purge - Check Drive
// Проверка дали е завършил хода на оста

	stackerUnloadStates.stUnloadPurgeMoveCheck:		
		IF Stations.sUnloadDrive.TargetReached AND NOT Stations.sUnloadDrive.Error THEN
			Stations.sUnloadDrive.DoMove := FALSE;
			moveDone 				     := TRUE;
			nextState(stackerUnloadStates.stUnloadPurgeDone);	
		ELSIF NOT Stations.sUnloadDrive.TargetReached AND Stations.sUnloadDrive.Error THEN
			setError(stackerUnloadStates.stInitMoveErr);
		END_IF	
		timeOutError(palletMoveTimeOut, stackerUnloadStates.stErrPalletMove);			
	
// *** Purge - Done
// От тук стакера се ресетва

	stackerUnloadStates.stUnloadPurgeDone:	
		nextState(stackerUnloadStates.stResetStart);		
		
// *** Step Block State
// В този state се влиза винаги след изпълняването на една стъпка при стъпков режим
	stackerUnloadStates.stStepBlock:
		setDisplayState(stackerUnLoadDisplayStates.dStWaitForNextStep);	
		
// *** Station Stop
// Станцията е била изключена 
 
	stackerUnloadStates.stStop:						   							   
		resetDone			 := FALSE; 		
		prepareDone			 := FALSE;							  
		moveUpStart			 := FALSE;							   
		unlockPalletStart    := FALSE; 						  
		fixPalletStart		 := FALSE; 						  
		purgeStart			 := FALSE; 						   
		moveDone		     := FALSE; 						   						   
	
// Състояния за грешки
	
//  *** ERROR No axis setting
// 	Липсват настойки на оста (ход и размер на тара)	

	stackerUnloadStates.stErrNoProperSettings:
		setDisplayState(stackerUnLoadDisplayStates.dStAxisNotConfigured);

// *** ERROR remove Pallet	
// След старт на машината не трябва да има палет на стакера. 
// Ако има оператора трябва да го махне

	stackerUnloadStates.stErrRemovePallet:
		setDisplayState(stackerUnLoadDisplayStates.dStRemotePalletManually);

// *** ЕRROR  Lock 1 not open
// Цилиндъра не се е отворил навреме
		
	stackerUnloadStates.stErrLock1NotOpen:
		setDisplayState(stackerUnLoadDisplayStates.dStLock1CylinderDidNotOpen);
		
// *** ЕRROR  Lock 1 not close
// Цилиндъра не се е затворил навреме
		
	stackerUnloadStates.stErrLock1NotClose:
		setDisplayState(stackerUnLoadDisplayStates.dStLock1CylinderDidNotClose);	
		
// *** ЕRROR  Lock 2 not open
// Цилиндъра не се е отворил навреме	
	
	stackerUnloadStates.stErrLock2NotOpen:
		setDisplayState(stackerUnLoadDisplayStates.dStLock2CylinderDidNotOpen);		
		
// *** ЕRROR  Lock 2 not close
// Цилиндъра не се е затворил навреме	
	
	stackerUnloadStates.stErrLock2NotClose:
		setDisplayState(stackerUnLoadDisplayStates.dStLock2CylinderDidNotClose);			

// *** ЕRROR  Fixer not open
// Цилиндъра не се е отворил навреме	
	
	stackerUnloadStates.stErrFixerNotOpen:
		setDisplayState(stackerUnLoadDisplayStates.dStFixerCylinderDidNotOpen);	
		
// *** ЕRROR  Fixer not close
// Цилиндъра не се е затворил навреме	
	
	stackerUnloadStates.stErrFixerNotClose:
		setDisplayState(stackerUnLoadDisplayStates.dStFixerCylinderDidNotClose);		

// *** ERROR Axis
// Има грешка на FESTO инвертора

	stackerUnloadStates.stErrAxis:
		Stations.sUnloadDrive.DoEnable     := FALSE;
		setDisplayState(stackerUnLoadDisplayStates.dStFestoDriveError);
		
// ***ERROR Init move
// Движението към горна крайна точка при init е отнело твърде мн. време		
		
	stackerUnloadStates.stInitMoveErr:
		Stations.sUnloadDrive.DoMove       := FALSE;
		Stations.sUnloadDrive.DoEnable     := FALSE;
		setDisplayState(stackerUnLoadDisplayStates.dStAxisInitMoveTakesTooLong);
		
// *** ERROR Pallet Move up
// Движението за преместването на една тара ход нагоре е отнело твърде мн време

	stackerUnloadStates.stErrPalletMove:
		Stations.sUnloadDrive.DoMove       := FALSE;
		Stations.sUnloadDrive.DoEnable     := FALSE;
		setDisplayState(stackerUnLoadDisplayStates.dStPalletMoveTakesTooLong);
		
// *** ERROR Pallet Detected
// На "върха" на стaкера има засечена tara от xPalletOnTop, а не трябва
// Вероятно проблем със самият сензор
	
	stackerUnloadStates.stErrPalletDetected:
		setDisplayState(stackerUnLoadDisplayStates.dStPalletIsDetectedFault);

// *** ERROR No Pallet
// Стакер се опитва да зареди тари, но не открива тара на върха

	stackerUnloadStates.stErrNoPallet:
		setDisplayState(stackerUnLoadDisplayStates.dStThereIsNoPalletOnTop);		
		
// *** EMG Stop
// Аварийно спиране при натискане на гъба или отваряне на врата

	stackerUnloadStates.stEMG:	
		
		Stations.sUnloadDrive.DoMove       := FALSE;
		Stations.sUnloadDrive.DoEnable     := FALSE;
		
		nextState(stackerUnloadStates.stInit);
	
END_CASE


]]></ST>
    </Implementation>
    <Action Name="drivesControl" Id="{c0e2acae-ba3b-46f9-b61f-06a4aaf5bab9}">
      <Implementation>
        <ST><![CDATA[

axisFesto          ( axis				:= Stations.sUnloadAxis,
					PowerUP 			:= Stations.sUnloadDrive.DoEnable, 
					Home 				:= Stations.sUnloadDrive.DoHome, 
					StartMove 			:= Stations.sUnloadDrive.DoMove, 
					Reset 				:= Stations.sUnloadDrive.DoReset, 
					Position 			:= Stations.sUnloadDrive.TargetPosition, 
					Velocity 			:= Stations.sUnloadDrive.TargetVelocity,
					Acceleration		:= Stations.sUnloadDrive.TargetAcceleration,
					IsAbsolute 			:= TRUE,
					Enabled 			=> Stations.sUnloadDrive.Enabled,
					Error 				=> Stations.sUnloadDrive.Error,
					ErrorID 			=> Stations.sUnloadDrive.ErrorID,
					TargetReached 		:= Stations.sUnloadDrive.TargetReached,
					HomeDone 			=> Stations.sUnloadDrive.Refferenced,
					Moving 				=> Stations.sUnloadDrive.Moving,
					CurrentPosition 	=> Stations.sUnloadDrive.CurrentPosition,
					OperationMode		:= Stations.sUnloadDrive.OperationMode);]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="stackerUnloadStation">
      <LineId Id="3296" Count="60" />
      <LineId Id="4253" Count="0" />
      <LineId Id="3358" Count="22" />
      <LineId Id="4294" Count="0" />
      <LineId Id="3381" Count="4" />
      <LineId Id="3390" Count="72" />
      <LineId Id="4186" Count="0" />
      <LineId Id="3463" Count="0" />
      <LineId Id="4188" Count="0" />
      <LineId Id="3464" Count="22" />
      <LineId Id="4147" Count="0" />
      <LineId Id="3487" Count="0" />
      <LineId Id="4145" Count="1" />
      <LineId Id="3494" Count="7" />
      <LineId Id="4148" Count="0" />
      <LineId Id="4293" Count="0" />
      <LineId Id="3502" Count="104" />
      <LineId Id="4189" Count="0" />
      <LineId Id="3607" Count="0" />
      <LineId Id="4190" Count="0" />
      <LineId Id="3608" Count="10" />
      <LineId Id="3620" Count="4" />
      <LineId Id="4197" Count="0" />
      <LineId Id="4201" Count="1" />
      <LineId Id="4198" Count="0" />
      <LineId Id="4203" Count="0" />
      <LineId Id="4199" Count="1" />
      <LineId Id="3626" Count="3" />
      <LineId Id="4107" Count="0" />
      <LineId Id="3630" Count="43" />
      <LineId Id="4191" Count="0" />
      <LineId Id="3674" Count="0" />
      <LineId Id="4192" Count="0" />
      <LineId Id="3675" Count="82" />
      <LineId Id="3760" Count="1" />
      <LineId Id="4104" Count="0" />
      <LineId Id="4106" Count="0" />
      <LineId Id="4105" Count="0" />
      <LineId Id="3762" Count="10" />
      <LineId Id="4193" Count="0" />
      <LineId Id="3773" Count="0" />
      <LineId Id="4194" Count="0" />
      <LineId Id="3774" Count="13" />
      <LineId Id="4206" Count="2" />
      <LineId Id="4204" Count="0" />
      <LineId Id="4211" Count="1" />
      <LineId Id="3788" Count="10" />
      <LineId Id="3800" Count="47" />
      <LineId Id="4064" Count="0" />
      <LineId Id="3848" Count="24" />
      <LineId Id="4292" Count="0" />
      <LineId Id="3873" Count="43" />
      <LineId Id="4195" Count="0" />
      <LineId Id="3917" Count="0" />
      <LineId Id="4196" Count="0" />
      <LineId Id="3918" Count="101" />
      <LineId Id="4028" Count="20" />
      <LineId Id="4050" Count="13" />
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="stackerUnloadStation.drivesControl">
      <LineId Id="2" Count="1" />
      <LineId Id="20" Count="15" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>